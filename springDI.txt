스프링 DI

DI는 Dependency Injection 의 약자 우리말로는 의존성 주입
여기서 말하는 의존성은 객체 간의 의존을 의미한다.
의존한다는 것은 변경에 의해 영향을 받는 것


자동차라는 클래스를 만들었다.


자동차를 만들려다 보니까 타이어라는 클래스도 필요하다.


자동차 클래스는 타이어 클래스를 의존한다.

스프링은 객체 조립기의 역할 + 객체간의 의존성 주입까지 

대신 우리의 assembler는 meemberDao 전용 주입기지미나
스프링은 모든 클래스를 조립해줄 수 있다

2방식 중
첫 번 째 생성자 방식 : Bean 객체를 생성하는 시점에 모든 의존 객체가 주입된다.
두 번 째 setter방식: setter 메소드 이름을 통해 어떤 의존 객체가 주입되는지 알 수 있다.

@Bean 어노테이션을 통해 생성한 객체는 싱글톤 패턴이다.

@Autowired 우리가 등록한 스프링 Bean에 의존하는 다른 Bean을 자동으로 주입하고 싶을 때 사용, 주의할 점은 스프링이 관리하는 Bean 객체여야 함.

getBean()메소드 사용시 주의점!
@Bean 어노테이션을 통해 등록한 메소드의 이름과 getBean()메소드에 전달한 첫 번 째 파라미터 값이 같아야 동작함.
getBean() 메소드를 사용할 때 bean의 이름과 타입을 같이 줄 때, 등록한 메소드의 이름과 타입이 메소드를 사용할 때 전달한 이름과 타입이 모두 일치해야함

getBean()메소드를 사용할 때 타입만 사용해서 Bean을 가져올 수 있긴한데 해당 타입을 가진 bean이 한 개 일 때만.
